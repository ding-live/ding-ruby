# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module DingSDK
  module Shared
    # CreateCheckResponseStatus - The status of the check. Possible values are:
    #   * `valid` - The code is valid.
    #   * `invalid` - The code is invalid.
    #   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
    #   * `rate_limited` - The authentication was rate limited and cannot be checked.
    #   * `already_validated` - The authentication has already been validated.
    #   * `expired_auth` - The authentication has expired and cannot be checked.
    # 
    class CreateCheckResponseStatus < T::Enum
      enums do
        VALID = new('valid')
        INVALID = new('invalid')
        WITHOUT_ATTEMPT = new('without_attempt')
        RATE_LIMITED = new('rate_limited')
        ALREADY_VALIDATED = new('already_validated')
        EXPIRED_AUTH = new('expired_auth')
      end
    end



    class CreateCheckResponse < DingSDK::Utils::FieldAugmented
      extend T::Sig

      # The UUID of the corresponding authentication.
      field :authentication_uuid, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('authentication_uuid') } }
      # The status of the check. Possible values are:
      #   * `valid` - The code is valid.
      #   * `invalid` - The code is invalid.
      #   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
      #   * `rate_limited` - The authentication was rate limited and cannot be checked.
      #   * `already_validated` - The authentication has already been validated.
      #   * `expired_auth` - The authentication has expired and cannot be checked.
      # 
      field :status, T.nilable(Shared::CreateCheckResponseStatus), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Shared::CreateCheckResponseStatus, true) } }


      sig { params(authentication_uuid: T.nilable(String), status: T.nilable(Shared::CreateCheckResponseStatus)).void }
      def initialize(authentication_uuid: nil, status: nil)
        @authentication_uuid = authentication_uuid
        @status = status
      end
    end
  end
end
