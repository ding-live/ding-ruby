# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module DingSDK
  module Models
    module Errors
    

      class ErrorResponse
        extend T::Sig
        include Crystalline::MetadataFields

        # A machine-readable code that describes the error.
        field :code, T.nilable(Models::Errors::Code), { 'format_json': { 'letter_case': ::DingSDK::Utils.field_name('code'), 'decoder': Utils.enum_from_string(Models::Errors::Code, true) } }
        # A link to the documentation that describes the error.
        field :doc_url, T.nilable(::String), { 'format_json': { 'letter_case': ::DingSDK::Utils.field_name('doc_url') } }
        # A human-readable message that describes the error.
        field :message, T.nilable(::String), { 'format_json': { 'letter_case': ::DingSDK::Utils.field_name('message') } }


        sig { params(code: T.nilable(Models::Errors::Code), doc_url: T.nilable(::String), message: T.nilable(::String)).void }
        def initialize(code: nil, doc_url: nil, message: nil)
          @code = code
          @doc_url = doc_url
          @message = message
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @code == other.code
          return false unless @doc_url == other.doc_url
          return false unless @message == other.message
          true
        end
      end
    end
  end
end
